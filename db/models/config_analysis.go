// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ConfigAnalysis is an object representing the database table.
type ConfigAnalysis struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ConfigID      string      `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`
	Analyzer      string      `boil:"analyzer" json:"analyzer" toml:"analyzer" yaml:"analyzer"`
	Summary       null.String `boil:"summary" json:"summary,omitempty" toml:"summary" yaml:"summary,omitempty"`
	AnalysisType  string      `boil:"analysis_type" json:"analysis_type" toml:"analysis_type" yaml:"analysis_type"`
	Analysis      null.JSON   `boil:"analysis" json:"analysis,omitempty" toml:"analysis" yaml:"analysis,omitempty"`
	FirstObserved time.Time   `boil:"first_observed" json:"first_observed" toml:"first_observed" yaml:"first_observed"`
	LastObserved  null.Time   `boil:"last_observed" json:"last_observed,omitempty" toml:"last_observed" yaml:"last_observed,omitempty"`

	R *configAnalysisR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configAnalysisL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigAnalysisColumns = struct {
	ID            string
	ConfigID      string
	Analyzer      string
	Summary       string
	AnalysisType  string
	Analysis      string
	FirstObserved string
	LastObserved  string
}{
	ID:            "id",
	ConfigID:      "config_id",
	Analyzer:      "analyzer",
	Summary:       "summary",
	AnalysisType:  "analysis_type",
	Analysis:      "analysis",
	FirstObserved: "first_observed",
	LastObserved:  "last_observed",
}

var ConfigAnalysisTableColumns = struct {
	ID            string
	ConfigID      string
	Analyzer      string
	Summary       string
	AnalysisType  string
	Analysis      string
	FirstObserved string
	LastObserved  string
}{
	ID:            "config_analysis.id",
	ConfigID:      "config_analysis.config_id",
	Analyzer:      "config_analysis.analyzer",
	Summary:       "config_analysis.summary",
	AnalysisType:  "config_analysis.analysis_type",
	Analysis:      "config_analysis.analysis",
	FirstObserved: "config_analysis.first_observed",
	LastObserved:  "config_analysis.last_observed",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ConfigAnalysisWhere = struct {
	ID            whereHelperstring
	ConfigID      whereHelperstring
	Analyzer      whereHelperstring
	Summary       whereHelpernull_String
	AnalysisType  whereHelperstring
	Analysis      whereHelpernull_JSON
	FirstObserved whereHelpertime_Time
	LastObserved  whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"config_analysis\".\"id\""},
	ConfigID:      whereHelperstring{field: "\"config_analysis\".\"config_id\""},
	Analyzer:      whereHelperstring{field: "\"config_analysis\".\"analyzer\""},
	Summary:       whereHelpernull_String{field: "\"config_analysis\".\"summary\""},
	AnalysisType:  whereHelperstring{field: "\"config_analysis\".\"analysis_type\""},
	Analysis:      whereHelpernull_JSON{field: "\"config_analysis\".\"analysis\""},
	FirstObserved: whereHelpertime_Time{field: "\"config_analysis\".\"first_observed\""},
	LastObserved:  whereHelpernull_Time{field: "\"config_analysis\".\"last_observed\""},
}

// ConfigAnalysisRels is where relationship names are stored.
var ConfigAnalysisRels = struct {
	Config string
}{
	Config: "Config",
}

// configAnalysisR is where relationships are stored.
type configAnalysisR struct {
	Config *ConfigItem `boil:"Config" json:"Config" toml:"Config" yaml:"Config"`
}

// NewStruct creates a new relationship struct
func (*configAnalysisR) NewStruct() *configAnalysisR {
	return &configAnalysisR{}
}

// configAnalysisL is where Load methods for each relationship are stored.
type configAnalysisL struct{}

var (
	configAnalysisAllColumns            = []string{"id", "config_id", "analyzer", "summary", "analysis_type", "analysis", "first_observed", "last_observed"}
	configAnalysisColumnsWithoutDefault = []string{"config_id", "analyzer", "summary", "analysis_type", "analysis", "last_observed"}
	configAnalysisColumnsWithDefault    = []string{"id", "first_observed"}
	configAnalysisPrimaryKeyColumns     = []string{"id"}
)

type (
	// ConfigAnalysisSlice is an alias for a slice of pointers to ConfigAnalysis.
	// This should almost always be used instead of []ConfigAnalysis.
	ConfigAnalysisSlice []*ConfigAnalysis
	// ConfigAnalysisHook is the signature for custom ConfigAnalysis hook methods
	ConfigAnalysisHook func(boil.Executor, *ConfigAnalysis) error

	configAnalysisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configAnalysisType                 = reflect.TypeOf(&ConfigAnalysis{})
	configAnalysisMapping              = queries.MakeStructMapping(configAnalysisType)
	configAnalysisPrimaryKeyMapping, _ = queries.BindMapping(configAnalysisType, configAnalysisMapping, configAnalysisPrimaryKeyColumns)
	configAnalysisInsertCacheMut       sync.RWMutex
	configAnalysisInsertCache          = make(map[string]insertCache)
	configAnalysisUpdateCacheMut       sync.RWMutex
	configAnalysisUpdateCache          = make(map[string]updateCache)
	configAnalysisUpsertCacheMut       sync.RWMutex
	configAnalysisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var configAnalysisBeforeInsertHooks []ConfigAnalysisHook
var configAnalysisBeforeUpdateHooks []ConfigAnalysisHook
var configAnalysisBeforeDeleteHooks []ConfigAnalysisHook
var configAnalysisBeforeUpsertHooks []ConfigAnalysisHook

var configAnalysisAfterInsertHooks []ConfigAnalysisHook
var configAnalysisAfterSelectHooks []ConfigAnalysisHook
var configAnalysisAfterUpdateHooks []ConfigAnalysisHook
var configAnalysisAfterDeleteHooks []ConfigAnalysisHook
var configAnalysisAfterUpsertHooks []ConfigAnalysisHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ConfigAnalysis) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configAnalysisBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ConfigAnalysis) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range configAnalysisBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ConfigAnalysis) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range configAnalysisBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ConfigAnalysis) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configAnalysisBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ConfigAnalysis) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configAnalysisAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ConfigAnalysis) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range configAnalysisAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ConfigAnalysis) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range configAnalysisAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ConfigAnalysis) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range configAnalysisAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ConfigAnalysis) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configAnalysisAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfigAnalysisHook registers your hook function for all future operations.
func AddConfigAnalysisHook(hookPoint boil.HookPoint, configAnalysisHook ConfigAnalysisHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		configAnalysisBeforeInsertHooks = append(configAnalysisBeforeInsertHooks, configAnalysisHook)
	case boil.BeforeUpdateHook:
		configAnalysisBeforeUpdateHooks = append(configAnalysisBeforeUpdateHooks, configAnalysisHook)
	case boil.BeforeDeleteHook:
		configAnalysisBeforeDeleteHooks = append(configAnalysisBeforeDeleteHooks, configAnalysisHook)
	case boil.BeforeUpsertHook:
		configAnalysisBeforeUpsertHooks = append(configAnalysisBeforeUpsertHooks, configAnalysisHook)
	case boil.AfterInsertHook:
		configAnalysisAfterInsertHooks = append(configAnalysisAfterInsertHooks, configAnalysisHook)
	case boil.AfterSelectHook:
		configAnalysisAfterSelectHooks = append(configAnalysisAfterSelectHooks, configAnalysisHook)
	case boil.AfterUpdateHook:
		configAnalysisAfterUpdateHooks = append(configAnalysisAfterUpdateHooks, configAnalysisHook)
	case boil.AfterDeleteHook:
		configAnalysisAfterDeleteHooks = append(configAnalysisAfterDeleteHooks, configAnalysisHook)
	case boil.AfterUpsertHook:
		configAnalysisAfterUpsertHooks = append(configAnalysisAfterUpsertHooks, configAnalysisHook)
	}
}

// OneG returns a single configAnalysis record from the query using the global executor.
func (q configAnalysisQuery) OneG() (*ConfigAnalysis, error) {
	return q.One(boil.GetDB())
}

// One returns a single configAnalysis record from the query.
func (q configAnalysisQuery) One(exec boil.Executor) (*ConfigAnalysis, error) {
	o := &ConfigAnalysis{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for config_analysis")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ConfigAnalysis records from the query using the global executor.
func (q configAnalysisQuery) AllG() (ConfigAnalysisSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all ConfigAnalysis records from the query.
func (q configAnalysisQuery) All(exec boil.Executor) (ConfigAnalysisSlice, error) {
	var o []*ConfigAnalysis

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ConfigAnalysis slice")
	}

	if len(configAnalysisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ConfigAnalysis records in the query, and panics on error.
func (q configAnalysisQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all ConfigAnalysis records in the query.
func (q configAnalysisQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count config_analysis rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q configAnalysisQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q configAnalysisQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if config_analysis exists")
	}

	return count > 0, nil
}

// Config pointed to by the foreign key.
func (o *ConfigAnalysis) Config(mods ...qm.QueryMod) configItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ConfigID),
	}

	queryMods = append(queryMods, mods...)

	query := ConfigItems(queryMods...)
	queries.SetFrom(query.Query, "\"config_item\"")

	return query
}

// LoadConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (configAnalysisL) LoadConfig(e boil.Executor, singular bool, maybeConfigAnalysis interface{}, mods queries.Applicator) error {
	var slice []*ConfigAnalysis
	var object *ConfigAnalysis

	if singular {
		object = maybeConfigAnalysis.(*ConfigAnalysis)
	} else {
		slice = *maybeConfigAnalysis.(*[]*ConfigAnalysis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configAnalysisR{}
		}
		args = append(args, object.ConfigID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configAnalysisR{}
			}

			for _, a := range args {
				if a == obj.ConfigID {
					continue Outer
				}
			}

			args = append(args, obj.ConfigID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config_item`),
		qm.WhereIn(`config_item.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ConfigItem")
	}

	var resultSlice []*ConfigItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ConfigItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for config_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config_item")
	}

	if len(configAnalysisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Config = foreign
		if foreign.R == nil {
			foreign.R = &configItemR{}
		}
		foreign.R.ConfigConfigAnalyses = append(foreign.R.ConfigConfigAnalyses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConfigID == foreign.ID {
				local.R.Config = foreign
				if foreign.R == nil {
					foreign.R = &configItemR{}
				}
				foreign.R.ConfigConfigAnalyses = append(foreign.R.ConfigConfigAnalyses, local)
				break
			}
		}
	}

	return nil
}

// SetConfigG of the configAnalysis to the related item.
// Sets o.R.Config to related.
// Adds o to related.R.ConfigConfigAnalyses.
// Uses the global database handle.
func (o *ConfigAnalysis) SetConfigG(insert bool, related *ConfigItem) error {
	return o.SetConfig(boil.GetDB(), insert, related)
}

// SetConfig of the configAnalysis to the related item.
// Sets o.R.Config to related.
// Adds o to related.R.ConfigConfigAnalyses.
func (o *ConfigAnalysis) SetConfig(exec boil.Executor, insert bool, related *ConfigItem) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"config_analysis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"config_id"}),
		strmangle.WhereClause("\"", "\"", 2, configAnalysisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConfigID = related.ID
	if o.R == nil {
		o.R = &configAnalysisR{
			Config: related,
		}
	} else {
		o.R.Config = related
	}

	if related.R == nil {
		related.R = &configItemR{
			ConfigConfigAnalyses: ConfigAnalysisSlice{o},
		}
	} else {
		related.R.ConfigConfigAnalyses = append(related.R.ConfigConfigAnalyses, o)
	}

	return nil
}

// ConfigAnalyses retrieves all the records using an executor.
func ConfigAnalyses(mods ...qm.QueryMod) configAnalysisQuery {
	mods = append(mods, qm.From("\"config_analysis\""))
	return configAnalysisQuery{NewQuery(mods...)}
}

// FindConfigAnalysisG retrieves a single record by ID.
func FindConfigAnalysisG(iD string, selectCols ...string) (*ConfigAnalysis, error) {
	return FindConfigAnalysis(boil.GetDB(), iD, selectCols...)
}

// FindConfigAnalysis retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfigAnalysis(exec boil.Executor, iD string, selectCols ...string) (*ConfigAnalysis, error) {
	configAnalysisObj := &ConfigAnalysis{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"config_analysis\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, configAnalysisObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from config_analysis")
	}

	if err = configAnalysisObj.doAfterSelectHooks(exec); err != nil {
		return configAnalysisObj, err
	}

	return configAnalysisObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ConfigAnalysis) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ConfigAnalysis) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_analysis provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configAnalysisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	configAnalysisInsertCacheMut.RLock()
	cache, cached := configAnalysisInsertCache[key]
	configAnalysisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			configAnalysisAllColumns,
			configAnalysisColumnsWithDefault,
			configAnalysisColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(configAnalysisType, configAnalysisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configAnalysisType, configAnalysisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"config_analysis\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"config_analysis\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into config_analysis")
	}

	if !cached {
		configAnalysisInsertCacheMut.Lock()
		configAnalysisInsertCache[key] = cache
		configAnalysisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ConfigAnalysis record using the global executor.
// See Update for more documentation.
func (o *ConfigAnalysis) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the ConfigAnalysis.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ConfigAnalysis) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	configAnalysisUpdateCacheMut.RLock()
	cache, cached := configAnalysisUpdateCache[key]
	configAnalysisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			configAnalysisAllColumns,
			configAnalysisPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update config_analysis, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"config_analysis\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, configAnalysisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configAnalysisType, configAnalysisMapping, append(wl, configAnalysisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update config_analysis row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for config_analysis")
	}

	if !cached {
		configAnalysisUpdateCacheMut.Lock()
		configAnalysisUpdateCache[key] = cache
		configAnalysisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q configAnalysisQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q configAnalysisQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for config_analysis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for config_analysis")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ConfigAnalysisSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigAnalysisSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configAnalysisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"config_analysis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, configAnalysisPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in configAnalysis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all configAnalysis")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ConfigAnalysis) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ConfigAnalysis) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_analysis provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configAnalysisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	configAnalysisUpsertCacheMut.RLock()
	cache, cached := configAnalysisUpsertCache[key]
	configAnalysisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			configAnalysisAllColumns,
			configAnalysisColumnsWithDefault,
			configAnalysisColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			configAnalysisAllColumns,
			configAnalysisPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert config_analysis, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(configAnalysisPrimaryKeyColumns))
			copy(conflict, configAnalysisPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"config_analysis\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(configAnalysisType, configAnalysisMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(configAnalysisType, configAnalysisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert config_analysis")
	}

	if !cached {
		configAnalysisUpsertCacheMut.Lock()
		configAnalysisUpsertCache[key] = cache
		configAnalysisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single ConfigAnalysis record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ConfigAnalysis) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single ConfigAnalysis record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ConfigAnalysis) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ConfigAnalysis provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configAnalysisPrimaryKeyMapping)
	sql := "DELETE FROM \"config_analysis\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from config_analysis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for config_analysis")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q configAnalysisQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q configAnalysisQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no configAnalysisQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from config_analysis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_analysis")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ConfigAnalysisSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigAnalysisSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(configAnalysisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configAnalysisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"config_analysis\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configAnalysisPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from configAnalysis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_analysis")
	}

	if len(configAnalysisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ConfigAnalysis) ReloadG() error {
	if o == nil {
		return errors.New("models: no ConfigAnalysis provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ConfigAnalysis) Reload(exec boil.Executor) error {
	ret, err := FindConfigAnalysis(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigAnalysisSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ConfigAnalysisSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigAnalysisSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfigAnalysisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configAnalysisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"config_analysis\".* FROM \"config_analysis\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configAnalysisPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConfigAnalysisSlice")
	}

	*o = slice

	return nil
}

// ConfigAnalysisExistsG checks if the ConfigAnalysis row exists.
func ConfigAnalysisExistsG(iD string) (bool, error) {
	return ConfigAnalysisExists(boil.GetDB(), iD)
}

// ConfigAnalysisExists checks if the ConfigAnalysis row exists.
func ConfigAnalysisExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"config_analysis\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if config_analysis exists")
	}

	return exists, nil
}
