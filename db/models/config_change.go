// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ConfigChange is an object representing the database table.
type ConfigChange struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ConfigID   string      `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`
	ChangeType string      `boil:"change_type" json:"change_type" toml:"change_type" yaml:"change_type"`
	Summary    null.String `boil:"summary" json:"summary,omitempty" toml:"summary" yaml:"summary,omitempty"`
	Patches    null.JSON   `boil:"patches" json:"patches,omitempty" toml:"patches" yaml:"patches,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *configChangeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configChangeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigChangeColumns = struct {
	ID         string
	ConfigID   string
	ChangeType string
	Summary    string
	Patches    string
	CreatedAt  string
}{
	ID:         "id",
	ConfigID:   "config_id",
	ChangeType: "change_type",
	Summary:    "summary",
	Patches:    "patches",
	CreatedAt:  "created_at",
}

var ConfigChangeTableColumns = struct {
	ID         string
	ConfigID   string
	ChangeType string
	Summary    string
	Patches    string
	CreatedAt  string
}{
	ID:         "config_change.id",
	ConfigID:   "config_change.config_id",
	ChangeType: "config_change.change_type",
	Summary:    "config_change.summary",
	Patches:    "config_change.patches",
	CreatedAt:  "config_change.created_at",
}

// Generated where

var ConfigChangeWhere = struct {
	ID         whereHelperstring
	ConfigID   whereHelperstring
	ChangeType whereHelperstring
	Summary    whereHelpernull_String
	Patches    whereHelpernull_JSON
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"config_change\".\"id\""},
	ConfigID:   whereHelperstring{field: "\"config_change\".\"config_id\""},
	ChangeType: whereHelperstring{field: "\"config_change\".\"change_type\""},
	Summary:    whereHelpernull_String{field: "\"config_change\".\"summary\""},
	Patches:    whereHelpernull_JSON{field: "\"config_change\".\"patches\""},
	CreatedAt:  whereHelpertime_Time{field: "\"config_change\".\"created_at\""},
}

// ConfigChangeRels is where relationship names are stored.
var ConfigChangeRels = struct {
	Config string
}{
	Config: "Config",
}

// configChangeR is where relationships are stored.
type configChangeR struct {
	Config *ConfigItem `boil:"Config" json:"Config" toml:"Config" yaml:"Config"`
}

// NewStruct creates a new relationship struct
func (*configChangeR) NewStruct() *configChangeR {
	return &configChangeR{}
}

// configChangeL is where Load methods for each relationship are stored.
type configChangeL struct{}

var (
	configChangeAllColumns            = []string{"id", "config_id", "change_type", "summary", "patches", "created_at"}
	configChangeColumnsWithoutDefault = []string{"config_id", "change_type", "summary", "patches"}
	configChangeColumnsWithDefault    = []string{"id", "created_at"}
	configChangePrimaryKeyColumns     = []string{"id"}
)

type (
	// ConfigChangeSlice is an alias for a slice of pointers to ConfigChange.
	// This should almost always be used instead of []ConfigChange.
	ConfigChangeSlice []*ConfigChange
	// ConfigChangeHook is the signature for custom ConfigChange hook methods
	ConfigChangeHook func(boil.Executor, *ConfigChange) error

	configChangeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configChangeType                 = reflect.TypeOf(&ConfigChange{})
	configChangeMapping              = queries.MakeStructMapping(configChangeType)
	configChangePrimaryKeyMapping, _ = queries.BindMapping(configChangeType, configChangeMapping, configChangePrimaryKeyColumns)
	configChangeInsertCacheMut       sync.RWMutex
	configChangeInsertCache          = make(map[string]insertCache)
	configChangeUpdateCacheMut       sync.RWMutex
	configChangeUpdateCache          = make(map[string]updateCache)
	configChangeUpsertCacheMut       sync.RWMutex
	configChangeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var configChangeBeforeInsertHooks []ConfigChangeHook
var configChangeBeforeUpdateHooks []ConfigChangeHook
var configChangeBeforeDeleteHooks []ConfigChangeHook
var configChangeBeforeUpsertHooks []ConfigChangeHook

var configChangeAfterInsertHooks []ConfigChangeHook
var configChangeAfterSelectHooks []ConfigChangeHook
var configChangeAfterUpdateHooks []ConfigChangeHook
var configChangeAfterDeleteHooks []ConfigChangeHook
var configChangeAfterUpsertHooks []ConfigChangeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ConfigChange) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configChangeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ConfigChange) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range configChangeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ConfigChange) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range configChangeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ConfigChange) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configChangeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ConfigChange) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configChangeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ConfigChange) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range configChangeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ConfigChange) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range configChangeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ConfigChange) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range configChangeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ConfigChange) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configChangeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfigChangeHook registers your hook function for all future operations.
func AddConfigChangeHook(hookPoint boil.HookPoint, configChangeHook ConfigChangeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		configChangeBeforeInsertHooks = append(configChangeBeforeInsertHooks, configChangeHook)
	case boil.BeforeUpdateHook:
		configChangeBeforeUpdateHooks = append(configChangeBeforeUpdateHooks, configChangeHook)
	case boil.BeforeDeleteHook:
		configChangeBeforeDeleteHooks = append(configChangeBeforeDeleteHooks, configChangeHook)
	case boil.BeforeUpsertHook:
		configChangeBeforeUpsertHooks = append(configChangeBeforeUpsertHooks, configChangeHook)
	case boil.AfterInsertHook:
		configChangeAfterInsertHooks = append(configChangeAfterInsertHooks, configChangeHook)
	case boil.AfterSelectHook:
		configChangeAfterSelectHooks = append(configChangeAfterSelectHooks, configChangeHook)
	case boil.AfterUpdateHook:
		configChangeAfterUpdateHooks = append(configChangeAfterUpdateHooks, configChangeHook)
	case boil.AfterDeleteHook:
		configChangeAfterDeleteHooks = append(configChangeAfterDeleteHooks, configChangeHook)
	case boil.AfterUpsertHook:
		configChangeAfterUpsertHooks = append(configChangeAfterUpsertHooks, configChangeHook)
	}
}

// OneG returns a single configChange record from the query using the global executor.
func (q configChangeQuery) OneG() (*ConfigChange, error) {
	return q.One(boil.GetDB())
}

// One returns a single configChange record from the query.
func (q configChangeQuery) One(exec boil.Executor) (*ConfigChange, error) {
	o := &ConfigChange{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for config_change")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ConfigChange records from the query using the global executor.
func (q configChangeQuery) AllG() (ConfigChangeSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all ConfigChange records from the query.
func (q configChangeQuery) All(exec boil.Executor) (ConfigChangeSlice, error) {
	var o []*ConfigChange

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ConfigChange slice")
	}

	if len(configChangeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ConfigChange records in the query, and panics on error.
func (q configChangeQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all ConfigChange records in the query.
func (q configChangeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count config_change rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q configChangeQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q configChangeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if config_change exists")
	}

	return count > 0, nil
}

// Config pointed to by the foreign key.
func (o *ConfigChange) Config(mods ...qm.QueryMod) configItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ConfigID),
	}

	queryMods = append(queryMods, mods...)

	query := ConfigItems(queryMods...)
	queries.SetFrom(query.Query, "\"config_item\"")

	return query
}

// LoadConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (configChangeL) LoadConfig(e boil.Executor, singular bool, maybeConfigChange interface{}, mods queries.Applicator) error {
	var slice []*ConfigChange
	var object *ConfigChange

	if singular {
		object = maybeConfigChange.(*ConfigChange)
	} else {
		slice = *maybeConfigChange.(*[]*ConfigChange)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configChangeR{}
		}
		args = append(args, object.ConfigID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configChangeR{}
			}

			for _, a := range args {
				if a == obj.ConfigID {
					continue Outer
				}
			}

			args = append(args, obj.ConfigID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config_item`),
		qm.WhereIn(`config_item.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ConfigItem")
	}

	var resultSlice []*ConfigItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ConfigItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for config_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config_item")
	}

	if len(configChangeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Config = foreign
		if foreign.R == nil {
			foreign.R = &configItemR{}
		}
		foreign.R.ConfigConfigChanges = append(foreign.R.ConfigConfigChanges, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConfigID == foreign.ID {
				local.R.Config = foreign
				if foreign.R == nil {
					foreign.R = &configItemR{}
				}
				foreign.R.ConfigConfigChanges = append(foreign.R.ConfigConfigChanges, local)
				break
			}
		}
	}

	return nil
}

// SetConfigG of the configChange to the related item.
// Sets o.R.Config to related.
// Adds o to related.R.ConfigConfigChanges.
// Uses the global database handle.
func (o *ConfigChange) SetConfigG(insert bool, related *ConfigItem) error {
	return o.SetConfig(boil.GetDB(), insert, related)
}

// SetConfig of the configChange to the related item.
// Sets o.R.Config to related.
// Adds o to related.R.ConfigConfigChanges.
func (o *ConfigChange) SetConfig(exec boil.Executor, insert bool, related *ConfigItem) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"config_change\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"config_id"}),
		strmangle.WhereClause("\"", "\"", 2, configChangePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConfigID = related.ID
	if o.R == nil {
		o.R = &configChangeR{
			Config: related,
		}
	} else {
		o.R.Config = related
	}

	if related.R == nil {
		related.R = &configItemR{
			ConfigConfigChanges: ConfigChangeSlice{o},
		}
	} else {
		related.R.ConfigConfigChanges = append(related.R.ConfigConfigChanges, o)
	}

	return nil
}

// ConfigChanges retrieves all the records using an executor.
func ConfigChanges(mods ...qm.QueryMod) configChangeQuery {
	mods = append(mods, qm.From("\"config_change\""))
	return configChangeQuery{NewQuery(mods...)}
}

// FindConfigChangeG retrieves a single record by ID.
func FindConfigChangeG(iD string, selectCols ...string) (*ConfigChange, error) {
	return FindConfigChange(boil.GetDB(), iD, selectCols...)
}

// FindConfigChange retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfigChange(exec boil.Executor, iD string, selectCols ...string) (*ConfigChange, error) {
	configChangeObj := &ConfigChange{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"config_change\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, configChangeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from config_change")
	}

	if err = configChangeObj.doAfterSelectHooks(exec); err != nil {
		return configChangeObj, err
	}

	return configChangeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ConfigChange) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ConfigChange) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_change provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configChangeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	configChangeInsertCacheMut.RLock()
	cache, cached := configChangeInsertCache[key]
	configChangeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			configChangeAllColumns,
			configChangeColumnsWithDefault,
			configChangeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(configChangeType, configChangeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configChangeType, configChangeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"config_change\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"config_change\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into config_change")
	}

	if !cached {
		configChangeInsertCacheMut.Lock()
		configChangeInsertCache[key] = cache
		configChangeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ConfigChange record using the global executor.
// See Update for more documentation.
func (o *ConfigChange) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the ConfigChange.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ConfigChange) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	configChangeUpdateCacheMut.RLock()
	cache, cached := configChangeUpdateCache[key]
	configChangeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			configChangeAllColumns,
			configChangePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update config_change, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"config_change\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, configChangePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configChangeType, configChangeMapping, append(wl, configChangePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update config_change row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for config_change")
	}

	if !cached {
		configChangeUpdateCacheMut.Lock()
		configChangeUpdateCache[key] = cache
		configChangeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q configChangeQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q configChangeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for config_change")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for config_change")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ConfigChangeSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigChangeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"config_change\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, configChangePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in configChange slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all configChange")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ConfigChange) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ConfigChange) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_change provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configChangeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	configChangeUpsertCacheMut.RLock()
	cache, cached := configChangeUpsertCache[key]
	configChangeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			configChangeAllColumns,
			configChangeColumnsWithDefault,
			configChangeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			configChangeAllColumns,
			configChangePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert config_change, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(configChangePrimaryKeyColumns))
			copy(conflict, configChangePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"config_change\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(configChangeType, configChangeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(configChangeType, configChangeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert config_change")
	}

	if !cached {
		configChangeUpsertCacheMut.Lock()
		configChangeUpsertCache[key] = cache
		configChangeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single ConfigChange record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ConfigChange) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single ConfigChange record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ConfigChange) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ConfigChange provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configChangePrimaryKeyMapping)
	sql := "DELETE FROM \"config_change\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from config_change")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for config_change")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q configChangeQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q configChangeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no configChangeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from config_change")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_change")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ConfigChangeSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigChangeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(configChangeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"config_change\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configChangePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from configChange slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_change")
	}

	if len(configChangeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ConfigChange) ReloadG() error {
	if o == nil {
		return errors.New("models: no ConfigChange provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ConfigChange) Reload(exec boil.Executor) error {
	ret, err := FindConfigChange(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigChangeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ConfigChangeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigChangeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfigChangeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configChangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"config_change\".* FROM \"config_change\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configChangePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConfigChangeSlice")
	}

	*o = slice

	return nil
}

// ConfigChangeExistsG checks if the ConfigChange row exists.
func ConfigChangeExistsG(iD string) (bool, error) {
	return ConfigChangeExists(boil.GetDB(), iD)
}

// ConfigChangeExists checks if the ConfigChange row exists.
func ConfigChangeExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"config_change\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if config_change exists")
	}

	return exists, nil
}
