// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ConfigItem is an object representing the database table.
type ConfigItem struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ScraperID   null.String `boil:"scraper_id" json:"scraper_id,omitempty" toml:"scraper_id" yaml:"scraper_id,omitempty"`
	ConfigType  string      `boil:"config_type" json:"config_type" toml:"config_type" yaml:"config_type"`
	ExternalID  null.String `boil:"external_id" json:"external_id,omitempty" toml:"external_id" yaml:"external_id,omitempty"`
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Namespace   null.String `boil:"namespace" json:"namespace,omitempty" toml:"namespace" yaml:"namespace,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Account     null.String `boil:"account" json:"account,omitempty" toml:"account" yaml:"account,omitempty"`
	Region      null.String `boil:"region" json:"region,omitempty" toml:"region" yaml:"region,omitempty"`
	Zone        null.String `boil:"zone" json:"zone,omitempty" toml:"zone" yaml:"zone,omitempty"`
	Network     null.String `boil:"network" json:"network,omitempty" toml:"network" yaml:"network,omitempty"`
	Subnet      null.String `boil:"subnet" json:"subnet,omitempty" toml:"subnet" yaml:"subnet,omitempty"`
	Config      null.JSON   `boil:"config" json:"config,omitempty" toml:"config" yaml:"config,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *configItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigItemColumns = struct {
	ID          string
	ScraperID   string
	ConfigType  string
	ExternalID  string
	Name        string
	Namespace   string
	Description string
	Account     string
	Region      string
	Zone        string
	Network     string
	Subnet      string
	Config      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	ScraperID:   "scraper_id",
	ConfigType:  "config_type",
	ExternalID:  "external_id",
	Name:        "name",
	Namespace:   "namespace",
	Description: "description",
	Account:     "account",
	Region:      "region",
	Zone:        "zone",
	Network:     "network",
	Subnet:      "subnet",
	Config:      "config",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var ConfigItemTableColumns = struct {
	ID          string
	ScraperID   string
	ConfigType  string
	ExternalID  string
	Name        string
	Namespace   string
	Description string
	Account     string
	Region      string
	Zone        string
	Network     string
	Subnet      string
	Config      string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "config_item.id",
	ScraperID:   "config_item.scraper_id",
	ConfigType:  "config_item.config_type",
	ExternalID:  "config_item.external_id",
	Name:        "config_item.name",
	Namespace:   "config_item.namespace",
	Description: "config_item.description",
	Account:     "config_item.account",
	Region:      "config_item.region",
	Zone:        "config_item.zone",
	Network:     "config_item.network",
	Subnet:      "config_item.subnet",
	Config:      "config_item.config",
	CreatedAt:   "config_item.created_at",
	UpdatedAt:   "config_item.updated_at",
}

// Generated where

var ConfigItemWhere = struct {
	ID          whereHelperstring
	ScraperID   whereHelpernull_String
	ConfigType  whereHelperstring
	ExternalID  whereHelpernull_String
	Name        whereHelpernull_String
	Namespace   whereHelpernull_String
	Description whereHelpernull_String
	Account     whereHelpernull_String
	Region      whereHelpernull_String
	Zone        whereHelpernull_String
	Network     whereHelpernull_String
	Subnet      whereHelpernull_String
	Config      whereHelpernull_JSON
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"config_item\".\"id\""},
	ScraperID:   whereHelpernull_String{field: "\"config_item\".\"scraper_id\""},
	ConfigType:  whereHelperstring{field: "\"config_item\".\"config_type\""},
	ExternalID:  whereHelpernull_String{field: "\"config_item\".\"external_id\""},
	Name:        whereHelpernull_String{field: "\"config_item\".\"name\""},
	Namespace:   whereHelpernull_String{field: "\"config_item\".\"namespace\""},
	Description: whereHelpernull_String{field: "\"config_item\".\"description\""},
	Account:     whereHelpernull_String{field: "\"config_item\".\"account\""},
	Region:      whereHelpernull_String{field: "\"config_item\".\"region\""},
	Zone:        whereHelpernull_String{field: "\"config_item\".\"zone\""},
	Network:     whereHelpernull_String{field: "\"config_item\".\"network\""},
	Subnet:      whereHelpernull_String{field: "\"config_item\".\"subnet\""},
	Config:      whereHelpernull_JSON{field: "\"config_item\".\"config\""},
	CreatedAt:   whereHelpertime_Time{field: "\"config_item\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"config_item\".\"updated_at\""},
}

// ConfigItemRels is where relationship names are stored.
var ConfigItemRels = struct {
	Scraper              string
	ConfigConfigAnalyses string
	ConfigConfigChanges  string
}{
	Scraper:              "Scraper",
	ConfigConfigAnalyses: "ConfigConfigAnalyses",
	ConfigConfigChanges:  "ConfigConfigChanges",
}

// configItemR is where relationships are stored.
type configItemR struct {
	Scraper              *ConfigScraper      `boil:"Scraper" json:"Scraper" toml:"Scraper" yaml:"Scraper"`
	ConfigConfigAnalyses ConfigAnalysisSlice `boil:"ConfigConfigAnalyses" json:"ConfigConfigAnalyses" toml:"ConfigConfigAnalyses" yaml:"ConfigConfigAnalyses"`
	ConfigConfigChanges  ConfigChangeSlice   `boil:"ConfigConfigChanges" json:"ConfigConfigChanges" toml:"ConfigConfigChanges" yaml:"ConfigConfigChanges"`
}

// NewStruct creates a new relationship struct
func (*configItemR) NewStruct() *configItemR {
	return &configItemR{}
}

// configItemL is where Load methods for each relationship are stored.
type configItemL struct{}

var (
	configItemAllColumns            = []string{"id", "scraper_id", "config_type", "external_id", "name", "namespace", "description", "account", "region", "zone", "network", "subnet", "config", "created_at", "updated_at"}
	configItemColumnsWithoutDefault = []string{"scraper_id", "config_type", "external_id", "name", "namespace", "description", "account", "region", "zone", "network", "subnet", "config"}
	configItemColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	configItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// ConfigItemSlice is an alias for a slice of pointers to ConfigItem.
	// This should almost always be used instead of []ConfigItem.
	ConfigItemSlice []*ConfigItem
	// ConfigItemHook is the signature for custom ConfigItem hook methods
	ConfigItemHook func(boil.Executor, *ConfigItem) error

	configItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configItemType                 = reflect.TypeOf(&ConfigItem{})
	configItemMapping              = queries.MakeStructMapping(configItemType)
	configItemPrimaryKeyMapping, _ = queries.BindMapping(configItemType, configItemMapping, configItemPrimaryKeyColumns)
	configItemInsertCacheMut       sync.RWMutex
	configItemInsertCache          = make(map[string]insertCache)
	configItemUpdateCacheMut       sync.RWMutex
	configItemUpdateCache          = make(map[string]updateCache)
	configItemUpsertCacheMut       sync.RWMutex
	configItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var configItemBeforeInsertHooks []ConfigItemHook
var configItemBeforeUpdateHooks []ConfigItemHook
var configItemBeforeDeleteHooks []ConfigItemHook
var configItemBeforeUpsertHooks []ConfigItemHook

var configItemAfterInsertHooks []ConfigItemHook
var configItemAfterSelectHooks []ConfigItemHook
var configItemAfterUpdateHooks []ConfigItemHook
var configItemAfterDeleteHooks []ConfigItemHook
var configItemAfterUpsertHooks []ConfigItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ConfigItem) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configItemBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ConfigItem) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range configItemBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ConfigItem) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range configItemBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ConfigItem) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configItemBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ConfigItem) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configItemAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ConfigItem) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range configItemAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ConfigItem) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range configItemAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ConfigItem) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range configItemAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ConfigItem) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configItemAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfigItemHook registers your hook function for all future operations.
func AddConfigItemHook(hookPoint boil.HookPoint, configItemHook ConfigItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		configItemBeforeInsertHooks = append(configItemBeforeInsertHooks, configItemHook)
	case boil.BeforeUpdateHook:
		configItemBeforeUpdateHooks = append(configItemBeforeUpdateHooks, configItemHook)
	case boil.BeforeDeleteHook:
		configItemBeforeDeleteHooks = append(configItemBeforeDeleteHooks, configItemHook)
	case boil.BeforeUpsertHook:
		configItemBeforeUpsertHooks = append(configItemBeforeUpsertHooks, configItemHook)
	case boil.AfterInsertHook:
		configItemAfterInsertHooks = append(configItemAfterInsertHooks, configItemHook)
	case boil.AfterSelectHook:
		configItemAfterSelectHooks = append(configItemAfterSelectHooks, configItemHook)
	case boil.AfterUpdateHook:
		configItemAfterUpdateHooks = append(configItemAfterUpdateHooks, configItemHook)
	case boil.AfterDeleteHook:
		configItemAfterDeleteHooks = append(configItemAfterDeleteHooks, configItemHook)
	case boil.AfterUpsertHook:
		configItemAfterUpsertHooks = append(configItemAfterUpsertHooks, configItemHook)
	}
}

// OneG returns a single configItem record from the query using the global executor.
func (q configItemQuery) OneG() (*ConfigItem, error) {
	return q.One(boil.GetDB())
}

// One returns a single configItem record from the query.
func (q configItemQuery) One(exec boil.Executor) (*ConfigItem, error) {
	o := &ConfigItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for config_item")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ConfigItem records from the query using the global executor.
func (q configItemQuery) AllG() (ConfigItemSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all ConfigItem records from the query.
func (q configItemQuery) All(exec boil.Executor) (ConfigItemSlice, error) {
	var o []*ConfigItem

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ConfigItem slice")
	}

	if len(configItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ConfigItem records in the query, and panics on error.
func (q configItemQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all ConfigItem records in the query.
func (q configItemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count config_item rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q configItemQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q configItemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if config_item exists")
	}

	return count > 0, nil
}

// Scraper pointed to by the foreign key.
func (o *ConfigItem) Scraper(mods ...qm.QueryMod) configScraperQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ScraperID),
	}

	queryMods = append(queryMods, mods...)

	query := ConfigScrapers(queryMods...)
	queries.SetFrom(query.Query, "\"config_scraper\"")

	return query
}

// ConfigConfigAnalyses retrieves all the config_analysis's ConfigAnalyses with an executor via config_id column.
func (o *ConfigItem) ConfigConfigAnalyses(mods ...qm.QueryMod) configAnalysisQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"config_analysis\".\"config_id\"=?", o.ID),
	)

	query := ConfigAnalyses(queryMods...)
	queries.SetFrom(query.Query, "\"config_analysis\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"config_analysis\".*"})
	}

	return query
}

// ConfigConfigChanges retrieves all the config_change's ConfigChanges with an executor via config_id column.
func (o *ConfigItem) ConfigConfigChanges(mods ...qm.QueryMod) configChangeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"config_change\".\"config_id\"=?", o.ID),
	)

	query := ConfigChanges(queryMods...)
	queries.SetFrom(query.Query, "\"config_change\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"config_change\".*"})
	}

	return query
}

// LoadScraper allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (configItemL) LoadScraper(e boil.Executor, singular bool, maybeConfigItem interface{}, mods queries.Applicator) error {
	var slice []*ConfigItem
	var object *ConfigItem

	if singular {
		object = maybeConfigItem.(*ConfigItem)
	} else {
		slice = *maybeConfigItem.(*[]*ConfigItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configItemR{}
		}
		if !queries.IsNil(object.ScraperID) {
			args = append(args, object.ScraperID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ScraperID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ScraperID) {
				args = append(args, obj.ScraperID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config_scraper`),
		qm.WhereIn(`config_scraper.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ConfigScraper")
	}

	var resultSlice []*ConfigScraper
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ConfigScraper")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for config_scraper")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config_scraper")
	}

	if len(configItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Scraper = foreign
		if foreign.R == nil {
			foreign.R = &configScraperR{}
		}
		foreign.R.ScraperConfigItems = append(foreign.R.ScraperConfigItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ScraperID, foreign.ID) {
				local.R.Scraper = foreign
				if foreign.R == nil {
					foreign.R = &configScraperR{}
				}
				foreign.R.ScraperConfigItems = append(foreign.R.ScraperConfigItems, local)
				break
			}
		}
	}

	return nil
}

// LoadConfigConfigAnalyses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configItemL) LoadConfigConfigAnalyses(e boil.Executor, singular bool, maybeConfigItem interface{}, mods queries.Applicator) error {
	var slice []*ConfigItem
	var object *ConfigItem

	if singular {
		object = maybeConfigItem.(*ConfigItem)
	} else {
		slice = *maybeConfigItem.(*[]*ConfigItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configItemR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config_analysis`),
		qm.WhereIn(`config_analysis.config_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load config_analysis")
	}

	var resultSlice []*ConfigAnalysis
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice config_analysis")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on config_analysis")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config_analysis")
	}

	if len(configAnalysisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ConfigConfigAnalyses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &configAnalysisR{}
			}
			foreign.R.Config = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConfigID {
				local.R.ConfigConfigAnalyses = append(local.R.ConfigConfigAnalyses, foreign)
				if foreign.R == nil {
					foreign.R = &configAnalysisR{}
				}
				foreign.R.Config = local
				break
			}
		}
	}

	return nil
}

// LoadConfigConfigChanges allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configItemL) LoadConfigConfigChanges(e boil.Executor, singular bool, maybeConfigItem interface{}, mods queries.Applicator) error {
	var slice []*ConfigItem
	var object *ConfigItem

	if singular {
		object = maybeConfigItem.(*ConfigItem)
	} else {
		slice = *maybeConfigItem.(*[]*ConfigItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configItemR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config_change`),
		qm.WhereIn(`config_change.config_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load config_change")
	}

	var resultSlice []*ConfigChange
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice config_change")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on config_change")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config_change")
	}

	if len(configChangeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ConfigConfigChanges = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &configChangeR{}
			}
			foreign.R.Config = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConfigID {
				local.R.ConfigConfigChanges = append(local.R.ConfigConfigChanges, foreign)
				if foreign.R == nil {
					foreign.R = &configChangeR{}
				}
				foreign.R.Config = local
				break
			}
		}
	}

	return nil
}

// SetScraperG of the configItem to the related item.
// Sets o.R.Scraper to related.
// Adds o to related.R.ScraperConfigItems.
// Uses the global database handle.
func (o *ConfigItem) SetScraperG(insert bool, related *ConfigScraper) error {
	return o.SetScraper(boil.GetDB(), insert, related)
}

// SetScraper of the configItem to the related item.
// Sets o.R.Scraper to related.
// Adds o to related.R.ScraperConfigItems.
func (o *ConfigItem) SetScraper(exec boil.Executor, insert bool, related *ConfigScraper) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"config_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"scraper_id"}),
		strmangle.WhereClause("\"", "\"", 2, configItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ScraperID, related.ID)
	if o.R == nil {
		o.R = &configItemR{
			Scraper: related,
		}
	} else {
		o.R.Scraper = related
	}

	if related.R == nil {
		related.R = &configScraperR{
			ScraperConfigItems: ConfigItemSlice{o},
		}
	} else {
		related.R.ScraperConfigItems = append(related.R.ScraperConfigItems, o)
	}

	return nil
}

// RemoveScraperG relationship.
// Sets o.R.Scraper to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *ConfigItem) RemoveScraperG(related *ConfigScraper) error {
	return o.RemoveScraper(boil.GetDB(), related)
}

// RemoveScraper relationship.
// Sets o.R.Scraper to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ConfigItem) RemoveScraper(exec boil.Executor, related *ConfigScraper) error {
	var err error

	queries.SetScanner(&o.ScraperID, nil)
	if _, err = o.Update(exec, boil.Whitelist("scraper_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Scraper = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ScraperConfigItems {
		if queries.Equal(o.ScraperID, ri.ScraperID) {
			continue
		}

		ln := len(related.R.ScraperConfigItems)
		if ln > 1 && i < ln-1 {
			related.R.ScraperConfigItems[i] = related.R.ScraperConfigItems[ln-1]
		}
		related.R.ScraperConfigItems = related.R.ScraperConfigItems[:ln-1]
		break
	}
	return nil
}

// AddConfigConfigAnalysesG adds the given related objects to the existing relationships
// of the config_item, optionally inserting them as new records.
// Appends related to o.R.ConfigConfigAnalyses.
// Sets related.R.Config appropriately.
// Uses the global database handle.
func (o *ConfigItem) AddConfigConfigAnalysesG(insert bool, related ...*ConfigAnalysis) error {
	return o.AddConfigConfigAnalyses(boil.GetDB(), insert, related...)
}

// AddConfigConfigAnalyses adds the given related objects to the existing relationships
// of the config_item, optionally inserting them as new records.
// Appends related to o.R.ConfigConfigAnalyses.
// Sets related.R.Config appropriately.
func (o *ConfigItem) AddConfigConfigAnalyses(exec boil.Executor, insert bool, related ...*ConfigAnalysis) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"config_analysis\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"config_id"}),
				strmangle.WhereClause("\"", "\"", 2, configAnalysisPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configItemR{
			ConfigConfigAnalyses: related,
		}
	} else {
		o.R.ConfigConfigAnalyses = append(o.R.ConfigConfigAnalyses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &configAnalysisR{
				Config: o,
			}
		} else {
			rel.R.Config = o
		}
	}
	return nil
}

// AddConfigConfigChangesG adds the given related objects to the existing relationships
// of the config_item, optionally inserting them as new records.
// Appends related to o.R.ConfigConfigChanges.
// Sets related.R.Config appropriately.
// Uses the global database handle.
func (o *ConfigItem) AddConfigConfigChangesG(insert bool, related ...*ConfigChange) error {
	return o.AddConfigConfigChanges(boil.GetDB(), insert, related...)
}

// AddConfigConfigChanges adds the given related objects to the existing relationships
// of the config_item, optionally inserting them as new records.
// Appends related to o.R.ConfigConfigChanges.
// Sets related.R.Config appropriately.
func (o *ConfigItem) AddConfigConfigChanges(exec boil.Executor, insert bool, related ...*ConfigChange) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"config_change\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"config_id"}),
				strmangle.WhereClause("\"", "\"", 2, configChangePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configItemR{
			ConfigConfigChanges: related,
		}
	} else {
		o.R.ConfigConfigChanges = append(o.R.ConfigConfigChanges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &configChangeR{
				Config: o,
			}
		} else {
			rel.R.Config = o
		}
	}
	return nil
}

// ConfigItems retrieves all the records using an executor.
func ConfigItems(mods ...qm.QueryMod) configItemQuery {
	mods = append(mods, qm.From("\"config_item\""))
	return configItemQuery{NewQuery(mods...)}
}

// FindConfigItemG retrieves a single record by ID.
func FindConfigItemG(iD string, selectCols ...string) (*ConfigItem, error) {
	return FindConfigItem(boil.GetDB(), iD, selectCols...)
}

// FindConfigItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfigItem(exec boil.Executor, iD string, selectCols ...string) (*ConfigItem, error) {
	configItemObj := &ConfigItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"config_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, configItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from config_item")
	}

	if err = configItemObj.doAfterSelectHooks(exec); err != nil {
		return configItemObj, err
	}

	return configItemObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ConfigItem) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ConfigItem) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_item provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	configItemInsertCacheMut.RLock()
	cache, cached := configItemInsertCache[key]
	configItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			configItemAllColumns,
			configItemColumnsWithDefault,
			configItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(configItemType, configItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configItemType, configItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"config_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"config_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into config_item")
	}

	if !cached {
		configItemInsertCacheMut.Lock()
		configItemInsertCache[key] = cache
		configItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ConfigItem record using the global executor.
// See Update for more documentation.
func (o *ConfigItem) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the ConfigItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ConfigItem) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	configItemUpdateCacheMut.RLock()
	cache, cached := configItemUpdateCache[key]
	configItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			configItemAllColumns,
			configItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update config_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"config_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, configItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configItemType, configItemMapping, append(wl, configItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update config_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for config_item")
	}

	if !cached {
		configItemUpdateCacheMut.Lock()
		configItemUpdateCache[key] = cache
		configItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q configItemQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q configItemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for config_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for config_item")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ConfigItemSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"config_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, configItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in configItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all configItem")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ConfigItem) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ConfigItem) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_item provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	configItemUpsertCacheMut.RLock()
	cache, cached := configItemUpsertCache[key]
	configItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			configItemAllColumns,
			configItemColumnsWithDefault,
			configItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			configItemAllColumns,
			configItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert config_item, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(configItemPrimaryKeyColumns))
			copy(conflict, configItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"config_item\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(configItemType, configItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(configItemType, configItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert config_item")
	}

	if !cached {
		configItemUpsertCacheMut.Lock()
		configItemUpsertCache[key] = cache
		configItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single ConfigItem record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ConfigItem) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single ConfigItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ConfigItem) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ConfigItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configItemPrimaryKeyMapping)
	sql := "DELETE FROM \"config_item\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from config_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for config_item")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q configItemQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q configItemQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no configItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from config_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_item")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ConfigItemSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigItemSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(configItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"config_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from configItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_item")
	}

	if len(configItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ConfigItem) ReloadG() error {
	if o == nil {
		return errors.New("models: no ConfigItem provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ConfigItem) Reload(exec boil.Executor) error {
	ret, err := FindConfigItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigItemSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ConfigItemSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfigItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"config_item\".* FROM \"config_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConfigItemSlice")
	}

	*o = slice

	return nil
}

// ConfigItemExistsG checks if the ConfigItem row exists.
func ConfigItemExistsG(iD string) (bool, error) {
	return ConfigItemExists(boil.GetDB(), iD)
}

// ConfigItemExists checks if the ConfigItem row exists.
func ConfigItemExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"config_item\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if config_item exists")
	}

	return exists, nil
}
