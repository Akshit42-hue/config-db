// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ConfigScraper is an object representing the database table.
type ConfigScraper struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ScraperType string      `boil:"scraper_type" json:"scraper_type" toml:"scraper_type" yaml:"scraper_type"`
	Spec        null.JSON   `boil:"spec" json:"spec,omitempty" toml:"spec" yaml:"spec,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *configScraperR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configScraperL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigScraperColumns = struct {
	ID          string
	Description string
	ScraperType string
	Spec        string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	Description: "description",
	ScraperType: "scraper_type",
	Spec:        "spec",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var ConfigScraperTableColumns = struct {
	ID          string
	Description string
	ScraperType string
	Spec        string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "config_scraper.id",
	Description: "config_scraper.description",
	ScraperType: "config_scraper.scraper_type",
	Spec:        "config_scraper.spec",
	CreatedAt:   "config_scraper.created_at",
	UpdatedAt:   "config_scraper.updated_at",
}

// Generated where

var ConfigScraperWhere = struct {
	ID          whereHelperstring
	Description whereHelpernull_String
	ScraperType whereHelperstring
	Spec        whereHelpernull_JSON
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"config_scraper\".\"id\""},
	Description: whereHelpernull_String{field: "\"config_scraper\".\"description\""},
	ScraperType: whereHelperstring{field: "\"config_scraper\".\"scraper_type\""},
	Spec:        whereHelpernull_JSON{field: "\"config_scraper\".\"spec\""},
	CreatedAt:   whereHelpertime_Time{field: "\"config_scraper\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"config_scraper\".\"updated_at\""},
}

// ConfigScraperRels is where relationship names are stored.
var ConfigScraperRels = struct {
	ScraperConfigItems string
}{
	ScraperConfigItems: "ScraperConfigItems",
}

// configScraperR is where relationships are stored.
type configScraperR struct {
	ScraperConfigItems ConfigItemSlice `boil:"ScraperConfigItems" json:"ScraperConfigItems" toml:"ScraperConfigItems" yaml:"ScraperConfigItems"`
}

// NewStruct creates a new relationship struct
func (*configScraperR) NewStruct() *configScraperR {
	return &configScraperR{}
}

// configScraperL is where Load methods for each relationship are stored.
type configScraperL struct{}

var (
	configScraperAllColumns            = []string{"id", "description", "scraper_type", "spec", "created_at", "updated_at"}
	configScraperColumnsWithoutDefault = []string{"description", "scraper_type", "spec"}
	configScraperColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	configScraperPrimaryKeyColumns     = []string{"id"}
)

type (
	// ConfigScraperSlice is an alias for a slice of pointers to ConfigScraper.
	// This should almost always be used instead of []ConfigScraper.
	ConfigScraperSlice []*ConfigScraper
	// ConfigScraperHook is the signature for custom ConfigScraper hook methods
	ConfigScraperHook func(boil.Executor, *ConfigScraper) error

	configScraperQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configScraperType                 = reflect.TypeOf(&ConfigScraper{})
	configScraperMapping              = queries.MakeStructMapping(configScraperType)
	configScraperPrimaryKeyMapping, _ = queries.BindMapping(configScraperType, configScraperMapping, configScraperPrimaryKeyColumns)
	configScraperInsertCacheMut       sync.RWMutex
	configScraperInsertCache          = make(map[string]insertCache)
	configScraperUpdateCacheMut       sync.RWMutex
	configScraperUpdateCache          = make(map[string]updateCache)
	configScraperUpsertCacheMut       sync.RWMutex
	configScraperUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var configScraperBeforeInsertHooks []ConfigScraperHook
var configScraperBeforeUpdateHooks []ConfigScraperHook
var configScraperBeforeDeleteHooks []ConfigScraperHook
var configScraperBeforeUpsertHooks []ConfigScraperHook

var configScraperAfterInsertHooks []ConfigScraperHook
var configScraperAfterSelectHooks []ConfigScraperHook
var configScraperAfterUpdateHooks []ConfigScraperHook
var configScraperAfterDeleteHooks []ConfigScraperHook
var configScraperAfterUpsertHooks []ConfigScraperHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ConfigScraper) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configScraperBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ConfigScraper) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range configScraperBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ConfigScraper) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range configScraperBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ConfigScraper) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configScraperBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ConfigScraper) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configScraperAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ConfigScraper) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range configScraperAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ConfigScraper) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range configScraperAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ConfigScraper) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range configScraperAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ConfigScraper) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range configScraperAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfigScraperHook registers your hook function for all future operations.
func AddConfigScraperHook(hookPoint boil.HookPoint, configScraperHook ConfigScraperHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		configScraperBeforeInsertHooks = append(configScraperBeforeInsertHooks, configScraperHook)
	case boil.BeforeUpdateHook:
		configScraperBeforeUpdateHooks = append(configScraperBeforeUpdateHooks, configScraperHook)
	case boil.BeforeDeleteHook:
		configScraperBeforeDeleteHooks = append(configScraperBeforeDeleteHooks, configScraperHook)
	case boil.BeforeUpsertHook:
		configScraperBeforeUpsertHooks = append(configScraperBeforeUpsertHooks, configScraperHook)
	case boil.AfterInsertHook:
		configScraperAfterInsertHooks = append(configScraperAfterInsertHooks, configScraperHook)
	case boil.AfterSelectHook:
		configScraperAfterSelectHooks = append(configScraperAfterSelectHooks, configScraperHook)
	case boil.AfterUpdateHook:
		configScraperAfterUpdateHooks = append(configScraperAfterUpdateHooks, configScraperHook)
	case boil.AfterDeleteHook:
		configScraperAfterDeleteHooks = append(configScraperAfterDeleteHooks, configScraperHook)
	case boil.AfterUpsertHook:
		configScraperAfterUpsertHooks = append(configScraperAfterUpsertHooks, configScraperHook)
	}
}

// OneG returns a single configScraper record from the query using the global executor.
func (q configScraperQuery) OneG() (*ConfigScraper, error) {
	return q.One(boil.GetDB())
}

// One returns a single configScraper record from the query.
func (q configScraperQuery) One(exec boil.Executor) (*ConfigScraper, error) {
	o := &ConfigScraper{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for config_scraper")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ConfigScraper records from the query using the global executor.
func (q configScraperQuery) AllG() (ConfigScraperSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all ConfigScraper records from the query.
func (q configScraperQuery) All(exec boil.Executor) (ConfigScraperSlice, error) {
	var o []*ConfigScraper

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ConfigScraper slice")
	}

	if len(configScraperAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ConfigScraper records in the query, and panics on error.
func (q configScraperQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all ConfigScraper records in the query.
func (q configScraperQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count config_scraper rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q configScraperQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q configScraperQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if config_scraper exists")
	}

	return count > 0, nil
}

// ScraperConfigItems retrieves all the config_item's ConfigItems with an executor via scraper_id column.
func (o *ConfigScraper) ScraperConfigItems(mods ...qm.QueryMod) configItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"config_item\".\"scraper_id\"=?", o.ID),
	)

	query := ConfigItems(queryMods...)
	queries.SetFrom(query.Query, "\"config_item\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"config_item\".*"})
	}

	return query
}

// LoadScraperConfigItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configScraperL) LoadScraperConfigItems(e boil.Executor, singular bool, maybeConfigScraper interface{}, mods queries.Applicator) error {
	var slice []*ConfigScraper
	var object *ConfigScraper

	if singular {
		object = maybeConfigScraper.(*ConfigScraper)
	} else {
		slice = *maybeConfigScraper.(*[]*ConfigScraper)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configScraperR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configScraperR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config_item`),
		qm.WhereIn(`config_item.scraper_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load config_item")
	}

	var resultSlice []*ConfigItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice config_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on config_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config_item")
	}

	if len(configItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ScraperConfigItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &configItemR{}
			}
			foreign.R.Scraper = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ScraperID) {
				local.R.ScraperConfigItems = append(local.R.ScraperConfigItems, foreign)
				if foreign.R == nil {
					foreign.R = &configItemR{}
				}
				foreign.R.Scraper = local
				break
			}
		}
	}

	return nil
}

// AddScraperConfigItemsG adds the given related objects to the existing relationships
// of the config_scraper, optionally inserting them as new records.
// Appends related to o.R.ScraperConfigItems.
// Sets related.R.Scraper appropriately.
// Uses the global database handle.
func (o *ConfigScraper) AddScraperConfigItemsG(insert bool, related ...*ConfigItem) error {
	return o.AddScraperConfigItems(boil.GetDB(), insert, related...)
}

// AddScraperConfigItems adds the given related objects to the existing relationships
// of the config_scraper, optionally inserting them as new records.
// Appends related to o.R.ScraperConfigItems.
// Sets related.R.Scraper appropriately.
func (o *ConfigScraper) AddScraperConfigItems(exec boil.Executor, insert bool, related ...*ConfigItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ScraperID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"config_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"scraper_id"}),
				strmangle.WhereClause("\"", "\"", 2, configItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ScraperID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &configScraperR{
			ScraperConfigItems: related,
		}
	} else {
		o.R.ScraperConfigItems = append(o.R.ScraperConfigItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &configItemR{
				Scraper: o,
			}
		} else {
			rel.R.Scraper = o
		}
	}
	return nil
}

// SetScraperConfigItemsG removes all previously related items of the
// config_scraper replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Scraper's ScraperConfigItems accordingly.
// Replaces o.R.ScraperConfigItems with related.
// Sets related.R.Scraper's ScraperConfigItems accordingly.
// Uses the global database handle.
func (o *ConfigScraper) SetScraperConfigItemsG(insert bool, related ...*ConfigItem) error {
	return o.SetScraperConfigItems(boil.GetDB(), insert, related...)
}

// SetScraperConfigItems removes all previously related items of the
// config_scraper replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Scraper's ScraperConfigItems accordingly.
// Replaces o.R.ScraperConfigItems with related.
// Sets related.R.Scraper's ScraperConfigItems accordingly.
func (o *ConfigScraper) SetScraperConfigItems(exec boil.Executor, insert bool, related ...*ConfigItem) error {
	query := "update \"config_item\" set \"scraper_id\" = null where \"scraper_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ScraperConfigItems {
			queries.SetScanner(&rel.ScraperID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Scraper = nil
		}

		o.R.ScraperConfigItems = nil
	}
	return o.AddScraperConfigItems(exec, insert, related...)
}

// RemoveScraperConfigItemsG relationships from objects passed in.
// Removes related items from R.ScraperConfigItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Scraper.
// Uses the global database handle.
func (o *ConfigScraper) RemoveScraperConfigItemsG(related ...*ConfigItem) error {
	return o.RemoveScraperConfigItems(boil.GetDB(), related...)
}

// RemoveScraperConfigItems relationships from objects passed in.
// Removes related items from R.ScraperConfigItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Scraper.
func (o *ConfigScraper) RemoveScraperConfigItems(exec boil.Executor, related ...*ConfigItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ScraperID, nil)
		if rel.R != nil {
			rel.R.Scraper = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("scraper_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ScraperConfigItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.ScraperConfigItems)
			if ln > 1 && i < ln-1 {
				o.R.ScraperConfigItems[i] = o.R.ScraperConfigItems[ln-1]
			}
			o.R.ScraperConfigItems = o.R.ScraperConfigItems[:ln-1]
			break
		}
	}

	return nil
}

// ConfigScrapers retrieves all the records using an executor.
func ConfigScrapers(mods ...qm.QueryMod) configScraperQuery {
	mods = append(mods, qm.From("\"config_scraper\""))
	return configScraperQuery{NewQuery(mods...)}
}

// FindConfigScraperG retrieves a single record by ID.
func FindConfigScraperG(iD string, selectCols ...string) (*ConfigScraper, error) {
	return FindConfigScraper(boil.GetDB(), iD, selectCols...)
}

// FindConfigScraper retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfigScraper(exec boil.Executor, iD string, selectCols ...string) (*ConfigScraper, error) {
	configScraperObj := &ConfigScraper{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"config_scraper\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, configScraperObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from config_scraper")
	}

	if err = configScraperObj.doAfterSelectHooks(exec); err != nil {
		return configScraperObj, err
	}

	return configScraperObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ConfigScraper) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ConfigScraper) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_scraper provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configScraperColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	configScraperInsertCacheMut.RLock()
	cache, cached := configScraperInsertCache[key]
	configScraperInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			configScraperAllColumns,
			configScraperColumnsWithDefault,
			configScraperColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(configScraperType, configScraperMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configScraperType, configScraperMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"config_scraper\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"config_scraper\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into config_scraper")
	}

	if !cached {
		configScraperInsertCacheMut.Lock()
		configScraperInsertCache[key] = cache
		configScraperInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ConfigScraper record using the global executor.
// See Update for more documentation.
func (o *ConfigScraper) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the ConfigScraper.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ConfigScraper) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	configScraperUpdateCacheMut.RLock()
	cache, cached := configScraperUpdateCache[key]
	configScraperUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			configScraperAllColumns,
			configScraperPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update config_scraper, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"config_scraper\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, configScraperPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configScraperType, configScraperMapping, append(wl, configScraperPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update config_scraper row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for config_scraper")
	}

	if !cached {
		configScraperUpdateCacheMut.Lock()
		configScraperUpdateCache[key] = cache
		configScraperUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q configScraperQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q configScraperQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for config_scraper")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for config_scraper")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ConfigScraperSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigScraperSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configScraperPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"config_scraper\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, configScraperPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in configScraper slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all configScraper")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ConfigScraper) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ConfigScraper) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_scraper provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configScraperColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	configScraperUpsertCacheMut.RLock()
	cache, cached := configScraperUpsertCache[key]
	configScraperUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			configScraperAllColumns,
			configScraperColumnsWithDefault,
			configScraperColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			configScraperAllColumns,
			configScraperPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert config_scraper, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(configScraperPrimaryKeyColumns))
			copy(conflict, configScraperPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"config_scraper\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(configScraperType, configScraperMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(configScraperType, configScraperMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert config_scraper")
	}

	if !cached {
		configScraperUpsertCacheMut.Lock()
		configScraperUpsertCache[key] = cache
		configScraperUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single ConfigScraper record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ConfigScraper) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single ConfigScraper record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ConfigScraper) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ConfigScraper provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configScraperPrimaryKeyMapping)
	sql := "DELETE FROM \"config_scraper\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from config_scraper")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for config_scraper")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q configScraperQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q configScraperQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no configScraperQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from config_scraper")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_scraper")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ConfigScraperSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigScraperSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(configScraperBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configScraperPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"config_scraper\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configScraperPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from configScraper slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_scraper")
	}

	if len(configScraperAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ConfigScraper) ReloadG() error {
	if o == nil {
		return errors.New("models: no ConfigScraper provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ConfigScraper) Reload(exec boil.Executor) error {
	ret, err := FindConfigScraper(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigScraperSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ConfigScraperSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigScraperSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfigScraperSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configScraperPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"config_scraper\".* FROM \"config_scraper\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configScraperPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConfigScraperSlice")
	}

	*o = slice

	return nil
}

// ConfigScraperExistsG checks if the ConfigScraper row exists.
func ConfigScraperExistsG(iD string) (bool, error) {
	return ConfigScraperExists(boil.GetDB(), iD)
}

// ConfigScraperExists checks if the ConfigScraper row exists.
func ConfigScraperExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"config_scraper\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if config_scraper exists")
	}

	return exists, nil
}
